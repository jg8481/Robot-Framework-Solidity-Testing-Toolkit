*** Settings ***
Library                       OperatingSystem
Library                       Process

*** Variables ***

${PATH}    ${EXECDIR}/solidity-truffle-web3js-tools

*** Tasks ***

TRUFFLE DEPLOYMENT STEP 1 : Compile Solidity smart contracts using the "truffle compile" command.
    Remove File    ${PATH}/logs/truffle-contract-compile.log
    Run Process    cd ${PATH} && echo "..." > ./logs/truffle-contract-compile.log && truffle compile >> ./logs/truffle-contract-compile.log    shell=yes
    ${OUTPUT}=    Get File    ${PATH}/logs/truffle-contract-compile.log
    Log    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...
    Log To Console    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...
    Run Process    killall node && killall npm    shell=yes

TRUFFLE DEPLOYMENT STEP 2 : Start a local Ethereum JSON-RPC server node using the "truffle develop" command.
    Remove File    ${PATH}/logs/truffle-ethereum-network-node.log
    Start Process    cd ${PATH} && echo "..." > ./logs/truffle-ethereum-network-node.log && truffle develop >> ./logs/truffle-ethereum-network-node.log &    shell=yes
    Sleep    10s
    ${OUTPUT}=    Get File    ${PATH}/logs/truffle-ethereum-network-node.log
    Log    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...
    Log To Console    The following output came from the local Truffle Develop node.
    Log To Console    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...

TRUFFLE DEPLOYMENT STEP 3 : Deploy the compiled Solidity smart contracts to the local Truffle Develop node.
    Remove File    ${PATH}/logs/truffle-contract-deployment.log
    Run Process    cd ${PATH} && echo "..." > ./logs/truffle-contract-deployment.log && truffle migrate >> ./logs/truffle-contract-deployment.log    shell=yes
    ${OUTPUT}=    Get File    ${PATH}/logs/truffle-contract-deployment.log
    Log    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...
    Log To Console    ${OUTPUT}
    Log To Console    ...
    Log To Console    ...
    Log To Console    ...